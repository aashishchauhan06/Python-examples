import unittest

def twoSum(arr, t):
    index_dict = {}
    length = len(arr)
    index = 0
    while index < length:
        if (t - arr[index]) in index_dict:
            return index_dict[t - arr[index]], index
        index_dict[arr[index]] = index
        index += 1

class TestTwoSum(unittest.TestCase):

    def test_example_case(self):
        # Test the provided example
        num_list = [2, 1, 3, 5, 6, 11, 2, 13, 4, 15]
        target = 12
        result = twoSum(num_list, target)
        self.assertEqual(result, (4, 5))

    def test_no_solution(self):
        # Test a case where there is no solution
        num_list = [1, 2, 3, 4, 5]
        target = 10
        result = twoSum(num_list, target)
        self.assertIsNone(result)

    def test_single_pair(self):
        # Test a case where only one pair exists
        num_list = [1, 2, 3, 4, 5]
        target = 9
        result = twoSum(num_list, target)
        self.assertEqual(result, (3, 4))

    def test_negative_numbers(self):
        # Test a case with negative numbers
        num_list = [-1, -2, -3, -4, -5]
        target = -8
        result = twoSum(num_list, target)
        self.assertEqual(result, (2, 4))

    def test_mixed_numbers(self):
        # Test a case with mixed positive and negative numbers
        num_list = [-1, 2, 3, -4, 5]
        target = 1
        result = twoSum(num_list, target)
        self.assertEqual(result, (0, 1))

    def test_large_numbers(self):
        # Test a case with large numbers
        num_list = [1000000, 500000, -1500000, 2000000]
        target = 500000
        result = twoSum(num_list, target)
        self.assertEqual(result, (1, 2))

if __name__ == '__main__':
    unittest.main()
